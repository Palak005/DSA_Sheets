import java.util.*;

/*************************************************************
 * 🔍 Problem: 3Sum (LeetCode)
 * 
 * Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] 
 * such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
 * 
 * ✅ Brute Force:
 *   - Use 3 nested loops to find all triplets → O(n³)
 * 
 * ✅ Optimal Approach (used below):
 *   1. Sort the array
 *   2. Iterate with index `i` from 0 to n-2
 *      - Skip duplicates for `i`
 *   3. For each `i`, use two pointers (`left`, `right`) to find a pair such that:
 *      nums[i] + nums[left] + nums[right] == 0
 *   4. Skip duplicates for left and right while adding triplets
 * 
 *************************************************************/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums); // Step 1: Sort the array

        List<List<Integer>> result = new ArrayList<>();

        // Step 2: Fix the first number and find pairs for the remaining using two pointers
        for (int i = 0; i < nums.length && nums[i] <= 0; i++) {

            // Skip duplicate values for i
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int target = -nums[i]; // target = -(nums[i])
            int left = i + 1;
            int right = nums.length - 1;

            // Step 3: Two-pointer search for target sum
            while (left < right) {
                int sum = nums[left] + nums[right];

                if (sum == target) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));

                    // Skip duplicates for left pointer
                    while (left < right && nums[left] == nums[left + 1]) left++;

                    // Skip duplicates for right pointer
                    while (left < right && nums[right] == nums[right - 1]) right--;

                    left++;
                    right--;

                } else if (sum < target) {
                    left++; // Need a larger number
                } else {
                    right--; // Need a smaller number
                }
            }
        }

        return result;
    }
}


/*************************************************************
 * 🧠 Time Complexity:
 *   - Sorting: O(n log n)
 *   - Outer loop: O(n)
 *   - Inner two-pointer loop: O(n) → total O(n²)
 * 
 * 💾 Space Complexity:
 *   - O(1) extra space (excluding output list)
 *   - Output list can have up to O(n²) triplets in worst case
 *************************************************************/
