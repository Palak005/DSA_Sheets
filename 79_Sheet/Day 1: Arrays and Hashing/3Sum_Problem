class Solution {
    //Brute Force : Using 3 nested loops
    //Optimal Approach : 1. Sorting the array
                    // 2. Setting the nums[i] as target 
                    // 3. Using Two Pointers to find the target

                    //  Considering only unique pairs code need to have certain conditions,
                    //  else store in set then transfer to list.

    public List<List<Integer>> threeSum(int[] nums) {

        Arrays.sort(nums);

        List<List<Integer>> threeSum = new ArrayList<List<Integer>>();
        for(int i = 0; i<nums.length && nums[i] <= 0; i++)
        {
            if(i>0 && nums[i] == nums[i-1])
            {
                continue;
            }

            int target = nums[i]*-1;

            int left = i+1;
            int right = nums.length-1;

            while(left < right)
            {
                int sum = nums[left] + nums[right];
                if(sum == target)
                {
                    threeSum.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    while(left < right && nums[left] == nums[left+1])
                    {
                        left++;
                    }

                    while(right > left && nums[right] == nums[right-1])
                    {
                        right--;
                    }

                    left++;
                    right--;
                }
                else if(sum > target)
                {
                    right--;
                }
                else
                {
                    left++;
                }
            }
        }

        
        return threeSum;
        
    }
}
