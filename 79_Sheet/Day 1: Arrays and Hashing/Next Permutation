class Solution {
    // [5, 7, 8, 6]
    // Optimal Approach : Finding the break point index
    //                     if breakpoint not found : Array is in descending order, so reverse the array
    //                     else : 
    //                     1. find the minimum value which is greater than breakpoint element, remember 
    //                     the min value will be considered from the last as it will be in descendig order.
    //                     2. Swap the elements
    //                     3. Reverse the array for breakpoint to n.

    public void reverse(int[] nums, int start, int end){
        while(start<end){
            int temp = nums[start];
            nums[start++] = nums[end];
            nums[end--] = temp;
        }
    }

    public void nextPermutation(int[] nums) {
        int n = nums.length;

        //Finding the Break Point
        int breakPoint = -1;
        for(int i = n-1; i>0; i--){
            if(nums[i]>nums[i-1]){
                breakPoint = i-1;
                break;
            }
        }

        if(breakPoint == -1){
            reverse(nums, 0, n-1);
            return;
        } 

        //Finding next greatest element
        for(int i = n-1; i>0; i--){
            if(nums[i]>nums[breakPoint-1]){
                int temp = nums[i];
                nums[i] = nums[breakPoint];
                nums[breakPoint] = temp;
            }
        }

        reverse(nums, breakPoint, n-1);
    }
}


//Brute Force : Using Double Loop to find the next greater element
// class Solution {
//     public void nextPermutation(int[] nums) {
//         int n = nums.length;

//         for(int i = n-1; i>=0; i--){
//             for(int j = n-1; j>i; j--){
//                 //Checking from last index
//                 if(nums[j]>nums[i]){
//                     //Swapping jth and ith index elements
//                     int temp = nums[i];
//                     nums[i] = nums[j];
//                     nums[j] = temp;

//                     //Sorting the end part of the array
//                     Arrays.sort(nums, i+1, n);
//                     return;
//                 }
//             }
//         }

//         Arrays.sort(nums);
//     }
// }
